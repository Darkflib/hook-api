Metadata-Version: 2.4
Name: webhook-mcp-service
Version: 0.1.0
Summary: An API for creating, managing, and triggering templated webhooks for testing.
Author-email: darkflib <darkflib@gmail.com>
License-Expression: MIT
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.111.0
Requires-Dist: uvicorn>=0.29.0
Requires-Dist: httpx>=0.27.0
Requires-Dist: click>=8.1.7
Requires-Dist: rich>=13.7.1
Requires-Dist: mcp>=1.10.1

# Webhook MCP Service

A FastAPI-based service for creating, managing, and triggering templated webhooks for testing and integration purposes.

## Overview

This service provides a RESTful API to:

- **Manage Webhook Templates**: Create, retrieve, update, and delete reusable webhook templates. Templates define the HTTP method, URL, headers, and body structure.

- **Trigger Webhooks**:
  - **Ad-hoc**: Send a one-off webhook with a specified payload.
  - **Templated**: Trigger a webhook based on a saved template, dynamically substituting values into placeholders.
  - **Asynchronous or Synchronous**: Choose whether to wait for the webhook response or fire-and-forget.

Placeholders use Python's `.format()` string syntax (e.g., `{user_id}`).

## Setup and Running the Service

### Prerequisites

- Python 3.8+
- uv

### Create a virtual environment (recommended)

```bash
uv venv
uv sync
```

### Run the application

Save the API code as main.py and run the following command in your terminal:

```bash
chmod +x run.sh
./run.sh
```

### Access the API Docs

Once the server is running, you can access the interactive API documentation (provided by Swagger UI) at:
`http://127.0.0.1:8000/docs`

## API Endpoints

The base URL is `http://127.0.0.1:8000`.

### Template Management

#### POST /templates/

Create a new webhook template.

Example curl command:

```bash
curl -X 'POST' \
  'http://127.0.0.1:8000/templates/' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "name": "New User Notification",
  "method": "POST",
  "url_template": "https://hooks.example.com/services/{service_id}",
  "headers_template": {
    "X-Event-Type": "user.created"
  },
  "body_template": {
    "username": "{username}",
    "email": "{email}",
    "source": "mcp-tester"
  }
}'
```

#### GET /templates/{template_id}

Retrieve a specific template by its ID.

#### GET /templates/

List all created templates.

#### PUT /templates/{template_id}

Update an existing template. The request body is the same as the create endpoint.

#### DELETE /templates/{template_id}

Delete a template.

### Webhook Triggers

#### POST /webhooks/trigger/adhoc

Send a one-off webhook, either synchronously or asynchronously.

Example curl command:

```bash
curl -X 'POST' \
  'http://127.0.0.1:8000/webhooks/trigger/adhoc' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "method": "POST",
  "url": "https://httpbin.org/post",
  "headers": {"X-Custom-Header": "adhoc-test"},
  "body": {"message": "Hello, World!"},
  "wait_for_response": true
}'
```

Set `wait_for_response` to `false` to send the webhook asynchronously without waiting for a response.

#### POST /webhooks/trigger/template

Trigger a webhook from a saved template, providing values for its placeholders, either synchronously or asynchronously.

Example curl command:
(Assuming you created the "New User Notification" template from the example above)

```bash
curl -X 'POST' \
  'http://127.0.0.1:8000/webhooks/trigger/template' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "template_id": "YOUR_TEMPLATE_ID_HERE",
  "values": {
    "service_id": "T123ABC",
    "username": "darkflib",
    "email": "mike@example.com"
  },
  "wait_for_response": true
}'
```

This will send a POST request to `https://hooks.example.com/services/T123ABC` with the substituted username and email in the body.

Set `wait_for_response` to `false` to send the webhook asynchronously without waiting for a response.

## API Response Format

### Webhook Trigger Response

When triggering a webhook (either ad-hoc or templated), the response format depends on the `wait_for_response` parameter:

#### When wait_for_response is true (default)

```json
{
  "webhook_status": "success",
  "webhook_request": {
    "method": "POST",
    "url": "https://hooks.example.com/services/T123ABC",
    "headers": {
      "X-Event-Type": "user.created",
      "Authorization": "REDACTED"  // Sensitive headers are redacted
    }
  },
  "webhook_response": {
    "status_code": 200,
    "headers": {
      "Content-Type": "application/json",
      "Server": "nginx/1.19.0"
    },
    "body": {
      "success": true,
      "message": "Webhook received"
    }
  }
}
```

#### When wait_for_response is false

```json
{
  "webhook_status": "accepted",
  "message": "Webhook request has been sent asynchronously",
  "webhook_request": {
    "method": "POST",
    "url": "https://hooks.example.com/services/T123ABC"
  }
}
```

## Notes

### Make sure your FastAPI service is running first

```bash
./run.sh
```

### CLI Examples

List all templates:

```bash
python cli.py templates list
```

Create a new template:

```bash
python cli.py templates create \
  --name "GitHub Issue Notifier" \
  --url "https://api.github.com/repos/{owner}/{repo}/issues" \
  --header "Authorization:Bearer {token}" \
  --body '{"title": "New Alert: {alert_name}", "body": "Details: {details}"}'
```

Get the template you just created (using its name):

```bash
python cli.py templates get "GitHub Issue Notifier"
```

Trigger it:

```bash
python cli.py templates trigger "GitHub Issue Notifier" \
  --value "owner=darkflib" \
  --value "repo=webhook-mcp" \
  --value "token=YOUR_GITHUB_TOKEN" \
  --value "alert_name=High CPU" \
  --value "details=Server xyz is on fire"
```

Or send it asynchronously without waiting for a response:

```bash
python cli.py templates trigger "GitHub Issue Notifier" \
  --value "owner=darkflib" \
  --value "repo=webhook-mcp" \
  --value "token=YOUR_GITHUB_TOKEN" \
  --value "alert_name=High CPU" \
  --value "details=Server xyz is on fire" \
  --async
```

Send an ad-hoc webhook:

```bash
python cli.py webhooks adhoc \
  --method POST \
  --url "https://httpbin.org/post" \
  --header "Content-Type:application/json" \
  --header "X-Custom-Header:test" \
  --body '{"message": "Hello from CLI", "source": "webhook-mcp"}'
```

Delete it:

```bash
python cli.py templates delete "GitHub Issue Notifier"
```
